{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","action.js","constant.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","searchField","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","kuchbhi","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","connect","dispatch","onsearchChange","event","text","target","value","console","log","payload","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2ef53ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD} from './constant.js';\r\n\r\nconst initialState ={ \r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialState,action={})=>{\r\n\t// console.log(action.type)\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField:action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n\r\n}","import React from 'react';\r\n\r\nconst Card=({name,email,id})=>{\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200*200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n\t// const cardArray= robots.map((user,i) =>{\r\n //      return (\r\n //      <Card \r\n //      key={i} \r\n //      id = {robots[i].id} \r\n //      name={robots[i].name} \r\n //      email={robots[i].email}\r\n //      />\r\n //      );\r\n\t// })\r\n\t// return(\r\n\t// <div>\r\n\t// \t{cardArray}\r\n\t// </div>\r\n\t// );\r\n\r\nreturn(\r\n\t<div>\r\n\t\t{\r\n\t\t  robots.map((kuchbhi,i) =>{\r\n\t\t      return (\r\n\t\t      <Card \r\n\t\t      key={robots[i].id} \r\n\t\t      id = {robots[i].id} \r\n\t\t      name={robots[i].name} \r\n\t\t      email={robots[i].email}\r\n\t\t      />\r\n\t\t      );\r\n\t\t  })\r\n\t\t}\r\n\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n\treturn (\r\n\t\t<div className= 'pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll' , border: '5px solid black', height: '450px' }}>\r\n\t\t{props.children}\r\n\t\t</div>\t\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport {setSearchField} from '../action';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchField\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onsearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n  }\r\n}\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n           robots:[]\r\n       }\r\n   }\r\n\r\n   componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}));\r\n   }\r\n\r\n//    onSearchChange=(event)=>{\r\n//     this.setState({searchfield: event.target.value})\r\n\r\n// }\r\nrender(){\r\n  const {robots}=this.state;\r\n  const { searchField , onSearchChange}= this.props;\r\n    const filteredRobots=robots.filter(robot=>{\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    return !robots.length?\r\n    <h1> Loading</h1>:\r\n    (\r\n     <div className='tc'>\r\n     <h1 className='f1'>RoboFriends</h1>\r\n     <SearchBox searchChange= {onSearchChange}/>\r\n     <Scroll>\r\n     <CardList robots={filteredRobots}/>\r\n     </Scroll>\r\n     </div>\r\n     );\r\n }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD} from './constant.js';\r\n\r\nexport const setSearchField = (text)=>{\r\n console.log(text);\r\n return{\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n\t}\r\n}","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore} from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots } from './reducers';\nimport App from './containers/App';\n\nconst store = createStore(searchRobots);\n\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider> , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}